#!/usr/bin/env python3
"""
Endpoint optimizado para chat con modificaciones din√°micas
Versi√≥n senior con manejo eficiente de base de datos y mejor rendimiento
"""

import os
import json
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime

from fastapi import APIRouter, HTTPException, Depends, status
from pydantic import BaseModel
from openai import OpenAI
from sqlalchemy.orm import Session

from app.database import get_db
from app.utils.functions_definitions import (
    OPENAI_FUNCTIONS, 
    FUNCTION_HANDLERS, 
    get_system_prompt_for_function,
    validate_function_arguments
)
from app.utils.function_handlers_optimized import (
    handle_modify_routine_focus,
    handle_adjust_routine_difficulty,
    handle_adjust_menstrual_cycle,
    handle_recalculate_macros,
    handle_substitute_food,
    handle_generate_alternatives,
    handle_simplify_diet,
    handle_substitute_exercise,
    handle_modify_routine_equipment,
    handle_revert_modification
)

# Diccionario para guardar confirmaciones pendientes
# En producci√≥n, usar Redis o base de datos
pending_confirmations: Dict[int, Dict[str, Any]] = {}
from app.utils.simple_injury_handler import handle_modify_routine_injury_simple
from app.utils.database_service import db_service
from app.utils.allergy_detection import process_user_allergies, validate_food_against_allergies, get_allergy_safe_alternatives

logger = logging.getLogger(__name__)
router = APIRouter()

# Configurar OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üí∞ MODELO DIN√ÅMICO: Usar modelo barato en desarrollo, caro en producci√≥n
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')

if ENVIRONMENT == 'production':
    MODEL = "gpt-4-turbo-preview"  # Para usuarios reales (~$0.03/1K tokens)
    logger.info("üöÄ Usando GPT-4 Turbo para PRODUCCI√ìN")
else:
    MODEL = "gpt-3.5-turbo"  # Para testing (~$0.0015/1K tokens - 20x m√°s barato)
    logger.info("üí° Usando GPT-3.5 Turbo para DESARROLLO (20x m√°s barato)")

class ChatRequest(BaseModel):
    """Modelo para requests de chat con modificaciones"""
    message: str
    user_id: int
    conversation_history: Optional[List[Dict[str, str]]] = []

class ChatResponse(BaseModel):
    """Modelo para respuestas de chat"""
    response: str
    modified: bool
    changes: List[str]
    function_used: Optional[str] = None

async def get_user_context(user_id: int, db: Session) -> Dict[str, Any]:
    """
    Obtiene el contexto completo del usuario para el chat - VERSI√ìN OPTIMIZADA
    
    Args:
        user_id: ID del usuario
        db: Sesi√≥n de base de datos
        
    Returns:
        Diccionario con contexto del usuario
    """
    try:
        logger.info(f"Obteniendo contexto para usuario {user_id}")
        
        # Usar el servicio optimizado de base de datos
        user_data = await db_service.get_user_complete_data(user_id, db)
        
        logger.info(f"Contexto obtenido para usuario {user_id}")
        return user_data
        
    except ValueError as e:
        logger.error(f"Usuario no encontrado {user_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Usuario {user_id} no encontrado"
        )
    except Exception as e:
        logger.error(f"Error obteniendo contexto del usuario {user_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error obteniendo contexto del usuario: {str(e)}"
        )

def build_system_prompt(user_context: Dict[str, Any]) -> str:
    """
    Construye el prompt del sistema con el contexto completo del usuario - VERSI√ìN OPTIMIZADA
    
    Args:
        user_context: Contexto del usuario
        
    Returns:
        Prompt del sistema
    """
    # Obtener objetivo actual de la dieta
    current_diet = user_context.get('current_diet', {})
    current_goal = current_diet.get('objetivo', 'mantenimiento')
    
    system_prompt = f"""Eres un entrenador personal de IA especializado en modificaciones din√°micas de rutinas y dietas.

CONTEXTO DEL USUARIO:
- Sexo: {user_context.get('sexo', 'No especificado')}
- Rutina: {len(user_context.get('current_routine', {}).get('exercises', []))} ejercicios
- Dieta: {len(user_context.get('current_diet', {}).get('meals', []))} comidas, {user_context.get('current_diet', {}).get('total_kcal', 0)} kcal
- Objetivo: {current_goal}
- Lesiones: {len(user_context.get('injuries', []))}
- Alergias: {user_context.get('alergias', 'ninguna')}

CAPACIDADES:
RUTINAS: modify_routine_injury, modify_routine_focus, adjust_routine_difficulty, substitute_exercise, modify_routine_equipment
DIETA: recalculate_diet_macros, substitute_disliked_food, generate_meal_alternatives, simplify_diet_plan
GENERAL: revert_last_modification

DETECCI√ìN AUTOM√ÅTICA:
üî• CAMBIOS DE PESO ‚Üí recalculate_diet_macros(weight_change_kg=X, goal="{current_goal}")
üéØ CAMBIOS DE OBJETIVO ‚Üí recalculate_diet_macros(weight_change_kg=0.0, goal="nuevo_objetivo")
üí™ EJERCICIOS NO DESEADOS ‚Üí substitute_exercise(exercise_to_replace="X", replacement_reason="no_gusta", target_muscles="Y")
üèãÔ∏è FALTA DE EQUIPAMIENTO ‚Üí modify_routine_equipment(missing_equipment="X", available_equipment="Y")
üí™ AJUSTES DE RUTINA ‚Üí adjust_routine_difficulty(difficulty_change="increase/decrease", reason="X")
üéØ ENFOQUE EN √ÅREAS ‚Üí modify_routine_focus(focus_area="X", intensity="medium/high")
üè• LESIONES ‚Üí modify_routine_injury(body_part="X", injury_type="Y")

üéØ DETECCI√ìN DE AJUSTES CAL√ìRICOS:
Cuando el usuario mencione cambios en d√©ficit/super√°vit cal√≥rico, debes identificar:

1. **La cantidad del ajuste** (ej: 500 kcal, 300 kcal)
2. **Si es d√©ficit (-) o super√°vit (+)**
3. **Si es ABSOLUTO, INCREMENTAL o AMBIGUO**

### üîç REGLAS DE DETECCI√ìN:

**ABSOLUTO (reemplazar d√©ficit/super√°vit total):**
Palabras clave: "de", "total de", "cambiar a", "quiero un d√©ficit de"
- "Quiero un d√©ficit de 500 kcal" ‚Üí calorie_adjustment=-500, is_incremental=false
- "Cambiar a super√°vit de 300 kcal" ‚Üí calorie_adjustment=300, is_incremental=false
- "Definici√≥n de 400 kcal" ‚Üí calorie_adjustment=-400, is_incremental=false
- "Super√°vit de 250" ‚Üí calorie_adjustment=250, is_incremental=false

**INCREMENTAL (a√±adir al d√©ficit/super√°vit actual):**
Palabras clave: "m√°s", "adicional", "extra", "a√±ade", "incrementa", "aumenta en", "reduce en"
- "A√±ade 100 kcal m√°s al d√©ficit" ‚Üí calorie_adjustment=-100, is_incremental=true
- "Incrementa el super√°vit 50 kcal" ‚Üí calorie_adjustment=50, is_incremental=true
- "Reduce 200 kcal adicionales" ‚Üí calorie_adjustment=-200, is_incremental=true
- "100 kcal m√°s de d√©ficit" ‚Üí calorie_adjustment=-100, is_incremental=true

**AMBIGUO (pedir confirmaci√≥n):**
Palabras clave: "aumenta a", "sube a", "baja a" (la preposici√≥n "a" es ambigua)
- "Aumenta el d√©ficit a 500 kcal" ‚Üí calorie_adjustment=-500, is_incremental=null
- "Sube el super√°vit a 400" ‚Üí calorie_adjustment=400, is_incremental=null
- "Cambia el d√©ficit a 600" ‚Üí calorie_adjustment=-600, is_incremental=null

PALABRAS CLAVE:
üî• Peso: "sub√≠", "baj√©", "gan√©", "perd√≠", "kg", "kilo", "peso"
üéØ Objetivo: "fuerza", "hipertrofia", "volumen", "definir", "mantener"
üí™ Dificultad: "f√°cil", "dif√≠cil", "intensidad", "rutina"
üéØ Enfoque: "enfocar", "m√°s", "pecho", "piernas", "brazos", "espalda", "hombros"
üè• Lesiones: "duele", "dolor", "lesi√≥n", "hombro", "rodilla", "espalda", "cu√°driceps"
üí™ Ejercicios: "no me gusta", "odio", "no tengo", "no puedo hacer"
üèãÔ∏è Equipamiento: "no tengo", "no hay", "m√°quina", "barra", "mancuernas"

SIN√ìNIMOS:
- "pectoral/pectorales" = "pecho"
- "cu√°driceps/cuadriceps" = "piernas"
- "deltoides" = "hombros"
- "dorsales" = "espalda"
- "b√≠ceps/tr√≠ceps" = "brazos"

INSTRUCCIONES:
1. Usa funciones autom√°ticamente cuando detectes cambios
2. S√© proactivo en detectar y aplicar modificaciones
3. Explica claramente qu√© cambios se realizaron
4. S√© emp√°tico y profesional
5. Prioriza la seguridad alimentaria"""
    
    return system_prompt

async def execute_function_handler(
    function_name: str, 
    arguments: Dict[str, Any], 
    user_id: int,
    db: Session
) -> Dict[str, Any]:
    """
    Ejecuta el handler correspondiente a una funci√≥n - VERSI√ìN OPTIMIZADA
    
    Args:
        function_name: Nombre de la funci√≥n
        arguments: Argumentos de la funci√≥n
        user_id: ID del usuario
        db: Sesi√≥n de base de datos
        
    Returns:
        Resultado de la ejecuci√≥n
    """
    try:
        # Logging detallado de argumentos
        logger.info(f"üîç Funci√≥n: {function_name}")
        logger.info(f"üìù Argumentos recibidos: {arguments}")
        logger.info(f"üìä Tipo de argumentos: {type(arguments)}")
        
        # Log detallado de cada argumento individual
        for key, value in arguments.items():
            value_str = str(value)[:100] if value else "None"  # Limitar a 100 chars
            logger.info(f"  ‚û§ {key}: {value_str} (type: {type(value).__name__})")
        
        # Normalizar argumentos: filtrar None para funciones que aceptan par√°metros opcionales
        if function_name == "recalculate_diet_macros":
            clean_arguments = {
                k: v for k, v in arguments.items()
                if v is not None and k in [
                    "weight_change_kg",
                    "goal",
                    "target_calories",
                    "calorie_adjustment",
                    "is_incremental",
                    "adjustment_type"
                ]
            }
            logger.info(f"‚úÖ Argumentos v√°lidos para {function_name}")
            logger.info(f"   Originales: {arguments}")
            logger.info(f"   Limpios: {clean_arguments}")
            if not clean_arguments:
                logger.error("‚ùå No hay argumentos v√°lidos despu√©s de filtrar")
                return {
                    "success": False,
                    "message": "No se detect√≥ ning√∫n cambio v√°lido en tu mensaje",
                    "changes": []
                }
            arguments = clean_arguments

        # Validar argumentos (despu√©s de limpieza)
        if not validate_function_arguments(function_name, arguments):
            logger.error(f"‚ùå Argumentos inv√°lidos para {function_name}: {arguments}")
            raise ValueError(f"Argumentos inv√°lidos para funci√≥n {function_name}")
        
        logger.info(f"‚úÖ Argumentos v√°lidos para {function_name}")
        
        # Mapeo de funciones a handlers
        handler_mapping = {
            "modify_routine_injury": handle_modify_routine_injury_simple,
            "modify_routine_focus": handle_modify_routine_focus,
            "adjust_routine_difficulty": handle_adjust_routine_difficulty,
            "adjust_for_menstrual_cycle": handle_adjust_menstrual_cycle,
            "recalculate_diet_macros": handle_recalculate_macros,
            "substitute_disliked_food": handle_substitute_food,
            "generate_meal_alternatives": handle_generate_alternatives,
            "simplify_diet_plan": handle_simplify_diet,
            "substitute_exercise": handle_substitute_exercise,
            "modify_routine_equipment": handle_modify_routine_equipment,
            "revert_last_modification": handle_revert_modification
        }
        
        handler = handler_mapping.get(function_name)
        if not handler:
            raise ValueError(f"Handler no encontrado para funci√≥n {function_name}")
        
        # Ejecutar handler con sesi√≥n de base de datos
        if function_name == "revert_last_modification":
            result = await handler(user_id, db)
        else:
            # Pasar TODOS los argumentos como keyword arguments para evitar mapeo incorrecto
            # Esto es cr√≠tico cuando las funciones tienen par√°metros con valores por defecto
            # A√±adir db a los argumentos antes de pasarlos
            arguments_with_db = {**arguments, 'db': db}
            result = await handler(user_id=user_id, **arguments_with_db)
        
        return result
        
    except Exception as e:
        logger.error(f"Error ejecutando handler {function_name}: {e}")
        return {
            "success": False,
            "message": f"Error ejecutando {function_name}: {str(e)}",
            "changes": []
        }

@router.post("/api/chat/modify", response_model=ChatResponse)
async def chat_with_modifications(
    request: ChatRequest,
    db: Session = Depends(get_db)
):
    """
    Endpoint principal para chat con modificaciones din√°micas - VERSI√ìN OPTIMIZADA
    """
    try:
        logger.info(f"Procesando chat para usuario {request.user_id}: {request.message[:50]}...")
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # VERIFICAR SI HAY CONFIRMACI√ìN PENDIENTE
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        if request.user_id in pending_confirmations:
            logger.info(f"üîç Confirmaci√≥n pendiente detectada para usuario {request.user_id}")
            pending = pending_confirmations[request.user_id]
            
            # Detectar si eligi√≥ opci√≥n A o B
            message_lower = request.message.lower()
            
            chosen_option = None
            if any(word in message_lower for word in ["opci√≥n a", "opcion a", "a)", "total", "primera", "absoluto"]):
                chosen_option = "A"
            elif any(word in message_lower for word in ["opci√≥n b", "opcion b", "b)", "a√±adir", "anadir", "mas", "m√°s", "incremental", "adicional"]):
                chosen_option = "B"
            
            if chosen_option:
                logger.info(f"‚úÖ Usuario eligi√≥ opci√≥n {chosen_option}")
                
                # Aplicar la opci√≥n elegida
                params = pending["params"].copy()
                option_data = pending["options"][chosen_option]
                
                params["is_incremental"] = option_data["is_incremental"]
                params["calorie_adjustment"] = option_data["calorie_adjustment"]
                
                # Ejecutar el rec√°lculo
                result = await handle_recalculate_macros(request.user_id, **params, db=db)
                
                # Limpiar confirmaci√≥n pendiente
                del pending_confirmations[request.user_id]
                
                if result.get("success"):
                    return ChatResponse(
                        response=f"‚úÖ Plan actualizado correctamente.\n\n{result.get('summary', '')}",
                        modified=True,
                        changes=result.get("changes", []),
                        function_used="recalculate_diet_macros"
                    )
                else:
                    return ChatResponse(
                        response=f"‚ùå Error al actualizar: {result.get('message', 'Error desconocido')}",
                        modified=False,
                        changes=[],
                        function_used="recalculate_diet_macros"
                    )
            else:
                # No entendi√≥ la respuesta, volver a preguntar
                return ChatResponse(
                    response="No entend√≠ tu respuesta. Por favor responde:\n‚Ä¢ 'Opci√≥n A' para d√©ficit total\n‚Ä¢ 'Opci√≥n B' para a√±adir al d√©ficit actual",
                    modified=False,
                    changes=[],
                    function_used="recalculate_diet_macros"
                )
        
        # 1. Obtener contexto del usuario (optimizado)
        user_context = await get_user_context(request.user_id, db)
        
        # 2. Construir mensajes para OpenAI - LIMITAR HISTORIAL PARA REDUCIR TOKENS
        # Solo enviar √∫ltimos 10 mensajes para evitar consumo excesivo de tokens
        limited_history = request.conversation_history[-10:] if request.conversation_history else []
        
        messages = [
            {"role": "system", "content": build_system_prompt(user_context)},
            *limited_history,
            {"role": "user", "content": request.message}
        ]
        
        # Logging de tokens para monitoreo
        estimated_tokens = len(str(messages)) // 4  # Estimaci√≥n aproximada
        logger.info(f"üìä Mensajes enviados: {len(messages)}, Estimaci√≥n tokens: ~{estimated_tokens}")
        if estimated_tokens > 5000:
            logger.warning(f"‚ö†Ô∏è ALERTA: Request muy grande! ~{estimated_tokens} tokens estimados")
        
        # 3. Llamar a OpenAI con function calling (optimizado) - CON RETRY LIMITS
        logger.info(f"Llamando a OpenAI para usuario {request.user_id}")
        
        MAX_RETRIES = 1  # No m√°s de 1 retry para evitar loops
        retry_count = 0
        
        while retry_count <= MAX_RETRIES:
            try:
                response = client.chat.completions.create(
                    model=MODEL,  # ‚úÖ Usa modelo din√°mico seg√∫n ambiente
                    messages=messages,
                    tools=[{"type": "function", "function": func} for func in OPENAI_FUNCTIONS],
                    tool_choice="auto",
                    temperature=0.7,
                    max_tokens=1000,
                    timeout=30  # Timeout para evitar cuelgues
                )
                
                # Logging adicional del modelo usado
                logger.info(f"ü§ñ Modelo usado: {MODEL} (Ambiente: {ENVIRONMENT})")
                
                # Logging de tokens reales usados
                if hasattr(response, 'usage') and response.usage:
                    tokens_used = response.usage.total_tokens
                    logger.info(f"üìä Tokens usados: {tokens_used}")
                    if tokens_used > 5000:
                        logger.warning(f"‚ùå ALERTA: Request muy grande! {tokens_used} tokens usados")
                    elif tokens_used > 2000:
                        logger.warning(f"‚ö†Ô∏è Request grande: {tokens_used} tokens usados")
                
                break  # Salir del loop si la llamada fue exitosa
                
            except Exception as e:
                retry_count += 1
                if retry_count > MAX_RETRIES:
                    logger.error(f"‚ùå Error en OpenAI despu√©s de {MAX_RETRIES} reintentos: {e}")
                    raise HTTPException(status_code=500, detail=f"Error en OpenAI: {str(e)}")
                else:
                    logger.warning(f"‚ö†Ô∏è Reintentando llamada a OpenAI (intento {retry_count}/{MAX_RETRIES}): {e}")
                    continue
        
        message = response.choices[0].message
        function_used = None
        changes = []
        modified = False
        
        # Log de la respuesta del LLM
        logger.info(f"üìù Contenido de la respuesta: {message.content[:200] if message.content else 'None'}")
        logger.info(f"üîß Tool calls: {len(message.tool_calls) if message.tool_calls else 0}")
        if message.tool_calls:
            logger.info(f"üîß Funci√≥n detectada: {message.tool_calls[0].function.name if message.tool_calls else 'None'}")
        
        # 4. Verificar si hay function call
        if message.tool_calls:
            function_call = message.tool_calls[0]
            function_name = function_call.function.name
            function_used = function_name
            
            try:
                # Parsear argumentos
                arguments = json.loads(function_call.function.arguments)
                
                # Ejecutar handler (optimizado)
                handler_result = await execute_function_handler(
                    function_name, 
                    arguments, 
                    request.user_id,
                    db
                )
                
                changes = handler_result.get("changes", [])
                modified = handler_result.get("success", False)
                
                # Verificar si necesita confirmaci√≥n
                if handler_result.get("needs_clarification"):
                    logger.info(f"ü§î Handler necesita confirmaci√≥n para usuario {request.user_id}")
                    
                    # Guardar confirmaci√≥n pendiente
                    pending_confirmations[request.user_id] = {
                        "params": handler_result.get("pending_params", {}),
                        "options": handler_result.get("options", {})
                    }
                    
                    return ChatResponse(
                        response=handler_result.get("message", "Necesito aclarar tu solicitud."),
                        modified=False,
                        changes=[],
                        function_used=function_name
                    )
                
                # Construir respuesta final
                if handler_result.get("success"):
                    final_messages = messages + [
                        {"role": "assistant", "content": message.content or "", "tool_calls": message.tool_calls},
                        {
                            "role": "tool", 
                            "tool_call_id": function_call.id,
                            "content": json.dumps(handler_result)
                        }
                    ]
                    
                    # Llamar a OpenAI nuevamente para respuesta final (con timeout)
                    final_response = client.chat.completions.create(
                        model=MODEL,  # ‚úÖ Usa modelo din√°mico seg√∫n ambiente
                        messages=final_messages,
                        temperature=0.7,
                        max_tokens=800,
                        timeout=30
                    )
                    
                    # Logging de tokens de la respuesta final
                    if hasattr(final_response, 'usage') and final_response.usage:
                        tokens_used = final_response.usage.total_tokens
                        logger.info(f"üìä Tokens usados (respuesta final): {tokens_used}")
                    
                    final_message = final_response.choices[0].message.content
                    
                    logger.info(f"Modificaci√≥n exitosa para usuario {request.user_id}: {function_name}")
                    
                    return ChatResponse(
                        response=final_message,
                        modified=modified,
                        changes=changes,
                        function_used=function_used
                    )
                else:
                    # Error en la modificaci√≥n
                    logger.warning(f"Error en modificaci√≥n para usuario {request.user_id}: {handler_result.get('message', 'Error desconocido')}")
                    
                    return ChatResponse(
                        response=handler_result.get("message", "Lo siento, hubo un problema al procesar tu solicitud."),
                        modified=False,
                        changes=[],
                        function_used=function_used
                    )
                    
            except json.JSONDecodeError as e:
                logger.error(f"Error parseando argumentos JSON: {e}")
                return ChatResponse(
                    response="Lo siento, hubo un problema al procesar tu solicitud.",
                    modified=False,
                    changes=[],
                    function_used=function_used
                )
            except Exception as e:
                logger.error(f"Error ejecutando funci√≥n {function_name}: {e}")
                return ChatResponse(
                    response=f"Lo siento, hubo un problema al procesar tu solicitud: {str(e)}",
                    modified=False,
                    changes=[],
                    function_used=function_used
                )
        else:
            # No hay function call, respuesta normal
            logger.info(f"Respuesta normal para usuario {request.user_id}")
            
            return ChatResponse(
                response=message.content or "Lo siento, no pude procesar tu solicitud.",
                modified=False,
                changes=[],
                function_used=None
            )
        
    except Exception as e:
        logger.error(f"Error en chat_with_modifications para usuario {request.user_id}: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error interno del servidor: {str(e)}"
        )
