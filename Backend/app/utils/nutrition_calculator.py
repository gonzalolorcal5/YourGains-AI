"""
Calculadora de nutrici√≥n: TMB, TDEE y macronutrientes

Este m√≥dulo proporciona funciones para calcular:
- TMB (Tasa Metab√≥lica Basal) usando la f√≥rmula de Mifflin-St Jeor
- TDEE (Total Daily Energy Expenditure) = calor√≠as de mantenimiento
- Distribuci√≥n de macronutrientes seg√∫n objetivo

Autor: YourGains AI
Fecha: 2025-10-21
"""

from typing import Dict, Tuple
import logging
import re

logger = logging.getLogger(__name__)


def parse_peso(peso_str: str) -> float:
    """
    Extrae el n√∫mero del string de peso
    
    Ejemplos:
        - "75kg" ‚Üí 75.0
        - "75" ‚Üí 75.0
        - "75.5 kg" ‚Üí 75.5
        - "175.5" ‚Üí 175.5
        
    Args:
        peso_str: String con el peso (puede incluir unidades)
        
    Returns:
        Peso en kg como float
    """
    try:
        # Extraer n√∫meros (incluyendo decimales) del string
        match = re.search(r'(\d+\.?\d*)', str(peso_str))
        if match:
            peso = float(match.group(1))
            logger.debug(f"‚úÖ Peso parseado: '{peso_str}' ‚Üí {peso}kg")
            return peso
        logger.warning(f"‚ö†Ô∏è No se pudo parsear peso '{peso_str}', usando 75kg por defecto")
        return 75.0  # Valor por defecto
    except Exception as e:
        logger.warning(f"‚ùå Error parseando peso '{peso_str}': {e}. Usando 75kg por defecto")
        return 75.0


def calculate_tmb(peso: float, altura: int, edad: int, sexo: str) -> float:
    """
    Calcula la Tasa Metab√≥lica Basal usando la f√≥rmula de Mifflin-St Jeor
    
    La TMB es la cantidad de calor√≠as que tu cuerpo necesita en reposo absoluto
    para mantener las funciones vitales (respiraci√≥n, circulaci√≥n, etc.)
    
    F√≥rmula de Mifflin-St Jeor (m√°s precisa que Harris-Benedict):
    - Hombres: TMB = (10 √ó peso_kg) + (6.25 √ó altura_cm) - (5 √ó edad) + 5
    - Mujeres: TMB = (10 √ó peso_kg) + (6.25 √ó altura_cm) - (5 √ó edad) - 161
    
    Args:
        peso: Peso en kg (float)
        altura: Altura en cm (int)
        edad: Edad en a√±os (int)
        sexo: "masculino" o "femenino"
        
    Returns:
        TMB en kcal/d√≠a (float)
    """
    try:
        sexo_lower = sexo.lower()
        
        if sexo_lower in ["masculino", "hombre", "male", "m"]:
            tmb = (10 * peso) + (6.25 * altura) - (5 * edad) + 5
            logger.debug(f"üî¢ TMB (masculino) = (10 √ó {peso}) + (6.25 √ó {altura}) - (5 √ó {edad}) + 5")
        elif sexo_lower in ["femenino", "mujer", "female", "f"]:
            tmb = (10 * peso) + (6.25 * altura) - (5 * edad) - 161
            logger.debug(f"üî¢ TMB (femenino) = (10 √ó {peso}) + (6.25 √ó {altura}) - (5 √ó {edad}) - 161")
        else:
            logger.warning(f"‚ö†Ô∏è Sexo no reconocido '{sexo}', usando f√≥rmula masculina")
            tmb = (10 * peso) + (6.25 * altura) - (5 * edad) + 5
        
        logger.info(f"üî• TMB calculada: {int(tmb)} kcal/d√≠a (peso={peso}kg, altura={altura}cm, edad={edad}, sexo={sexo})")
        return tmb
        
    except Exception as e:
        logger.error(f"‚ùå Error calculando TMB: {e}")
        return 1800.0  # Valor por defecto razonable


def calculate_tdee(tmb: float, nivel_actividad: str) -> int:
    """
    Calcula el TDEE (Total Daily Energy Expenditure) = calor√≠as de mantenimiento
    
    El TDEE es la cantidad total de calor√≠as que quemas en un d√≠a incluyendo
    actividad f√≠sica, digesti√≥n, etc.
    
    TDEE = TMB √ó factor_actividad
    
    Factores de actividad (basados en investigaci√≥n cient√≠fica):
    - sedentario: 1.2 (poco o ning√∫n ejercicio)
    - ligero: 1.375 (ejercicio ligero 1-3 d√≠as/semana)
    - moderado: 1.55 (ejercicio moderado 3-5 d√≠as/semana)
    - activo: 1.725 (ejercicio intenso 6-7 d√≠as/semana)
    - muy_activo: 1.9 (ejercicio muy intenso + trabajo f√≠sico)
    
    Args:
        tmb: Tasa Metab√≥lica Basal en kcal/d√≠a
        nivel_actividad: Nivel de actividad f√≠sica diaria
        
    Returns:
        TDEE en kcal/d√≠a (int)
    """
    factores_actividad = {
        "sedentario": 1.2,
        "ligero": 1.375,
        "moderado": 1.55,
        "activo": 1.725,
        "muy_activo": 1.9
    }
    
    nivel_lower = nivel_actividad.lower().replace(" ", "_")
    factor = factores_actividad.get(nivel_lower, 1.55)
    tdee = int(tmb * factor)
    
    logger.info(f"üèÉ Nivel actividad: {nivel_actividad} ‚Üí Factor: {factor}x")
    logger.info(f"üî¢ TDEE = TMB ({int(tmb)}) √ó {factor} = {tdee} kcal/d√≠a")
    logger.info(f"‚öñÔ∏è TDEE (calor√≠as de mantenimiento): {tdee} kcal/d√≠a")
    
    return tdee


def calculate_maintenance_calories(user_data: Dict) -> int:
    """
    Funci√≥n principal: calcula las calor√≠as de mantenimiento del usuario
    
    Este es el n√∫mero de calor√≠as que el usuario necesita consumir para
    mantener su peso actual con su nivel de actividad.
    
    Args:
        user_data: Diccionario con datos del usuario:
            - peso: str (ej: "75kg") o float
            - altura: int (ej: 175)
            - edad: int (ej: 25)
            - sexo: str (ej: "masculino")
            - nivel_actividad: str (ej: "moderado")
            
    Returns:
        Calor√≠as de mantenimiento (TDEE) en kcal/d√≠a
    """
    try:
        # Extraer y parsear datos
        peso_str = user_data.get("peso", "75")
        peso_kg = parse_peso(peso_str)
        altura_cm = int(user_data.get("altura", 175))
        edad_a√±os = int(user_data.get("edad", 25))
        sexo = user_data.get("sexo", "masculino")
        nivel_actividad = user_data.get("nivel_actividad", "moderado")
        
        logger.info("=" * 60)
        logger.info("üìä CALCULANDO CALOR√çAS DE MANTENIMIENTO")
        logger.info("=" * 60)
        logger.info(f"üë§ Perfil del usuario:")
        logger.info(f"   ‚Ä¢ Peso: {peso_kg}kg")
        logger.info(f"   ‚Ä¢ Altura: {altura_cm}cm")
        logger.info(f"   ‚Ä¢ Edad: {edad_a√±os} a√±os")
        logger.info(f"   ‚Ä¢ Sexo: {sexo}")
        logger.info(f"   ‚Ä¢ Nivel actividad: {nivel_actividad}")
        logger.info("-" * 60)
        
        # Paso 1: Calcular TMB
        tmb = calculate_tmb(peso_kg, altura_cm, edad_a√±os, sexo)
        
        # Paso 2: Calcular TDEE
        tdee = calculate_tdee(tmb, nivel_actividad)
        
        logger.info("=" * 60)
        logger.info(f"‚úÖ RESULTADO: {tdee} kcal/d√≠a (mantenimiento)")
        logger.info("=" * 60)
        
        return tdee
        
    except Exception as e:
        logger.error(f"‚ùå Error calculando calor√≠as de mantenimiento: {e}")
        logger.error(f"   user_data recibido: {user_data}")
        logger.warning("‚ö†Ô∏è Usando valor por defecto: 2500 kcal/d√≠a")
        return 2500  # Valor por defecto razonable


def calculate_calories_for_goal(tdee: int, goal: str) -> int:
    """
    Calcula las calor√≠as objetivo seg√∫n el goal nutricional
    
    Args:
        tdee: Calor√≠as de mantenimiento (TDEE)
        goal: Objetivo nutricional ("volumen", "definicion", "mantenimiento", etc.)
        
    Returns:
        Calor√≠as objetivo en kcal/d√≠a
    """
    ajustes_por_objetivo = {
        "volumen": 300,          # Super√°vit para ganar masa muscular
        "definicion": -300,      # D√©ficit para perder grasa
        "definici√≥n": -300,      # Variante con tilde
        "mantenimiento": 0,      # Mantener peso actual
        "fuerza": 200,          # Super√°vit moderado para fuerza
        "resistencia": -100      # D√©ficit ligero para resistencia
    }
    
    goal_lower = goal.lower() if goal else "mantenimiento"
    ajuste = ajustes_por_objetivo.get(goal_lower, 0)
    calorias_objetivo = tdee + ajuste
    
    logger.info("-" * 60)
    logger.info(f"üéØ Objetivo nutricional: {goal}")
    logger.info(f"‚öñÔ∏è TDEE (mantenimiento): {tdee} kcal/d√≠a")
    logger.info(f"üìä Ajuste: {ajuste:+d} kcal")
    logger.info(f"üìà Calor√≠as objetivo: {calorias_objetivo} kcal/d√≠a")
    logger.info("-" * 60)
    
    return calorias_objetivo


def calculate_macros_distribution(calorias_totales: int, peso_kg: float, goal: str) -> Dict[str, int]:
    """
    Calcula la distribuci√≥n de macronutrientes seg√∫n el objetivo
    
    La distribuci√≥n se basa en investigaciones cient√≠ficas sobre
    composici√≥n corporal y rendimiento deportivo.
    
    Args:
        calorias_totales: Calor√≠as totales diarias objetivo
        peso_kg: Peso del usuario en kg
        goal: Objetivo nutricional
        
    Returns:
        Dict con gramos de cada macro: {"proteina": X, "carbohidratos": Y, "grasas": Z}
    """
    goal_lower = goal.lower() if goal else "mantenimiento"
    
    # Prote√≠na: gramos por kg de peso corporal seg√∫n objetivo
    if goal_lower in ["volumen", "fuerza"]:
        proteina_g_por_kg = 2.0      # M√°s prote√≠na para construcci√≥n muscular
        grasa_porcentaje = 0.25      # 25% de calor√≠as de grasas
    elif goal_lower in ["definicion", "definici√≥n"]:
        proteina_g_por_kg = 2.2      # M√°s prote√≠na para preservar m√∫sculo en d√©ficit
        grasa_porcentaje = 0.30      # 30% de calor√≠as de grasas
    else:  # mantenimiento, resistencia, etc.
        proteina_g_por_kg = 1.8      # Prote√≠na est√°ndar
        grasa_porcentaje = 0.28      # 28% de calor√≠as de grasas
    
    # Calcular prote√≠na
    proteina_g = int(peso_kg * proteina_g_por_kg)
    proteina_kcal = proteina_g * 4  # 4 kcal por gramo de prote√≠na
    
    # Calcular grasas
    grasa_kcal = int(calorias_totales * grasa_porcentaje)
    grasa_g = int(grasa_kcal / 9)  # 9 kcal por gramo de grasa
    
    # Calcular carbohidratos (resto de calor√≠as)
    carbos_kcal = calorias_totales - proteina_kcal - grasa_kcal
    carbos_g = int(carbos_kcal / 4)  # 4 kcal por gramo de carbohidrato
    
    logger.info("üìä DISTRIBUCI√ìN DE MACRONUTRIENTES:")
    logger.info(f"   ü•© Prote√≠na: {proteina_g}g ({proteina_kcal} kcal, {proteina_g_por_kg}g/kg)")
    logger.info(f"   üçö Carbohidratos: {carbos_g}g ({carbos_kcal} kcal)")
    logger.info(f"   ü•ë Grasas: {grasa_g}g ({grasa_kcal} kcal, {int(grasa_porcentaje*100)}%)")
    logger.info(f"   üìä Total: {proteina_kcal + carbos_kcal + grasa_kcal} kcal")
    
    return {
        "proteina": proteina_g,
        "carbohidratos": carbos_g,
        "grasas": grasa_g
    }


def get_complete_nutrition_plan(user_data: Dict, goal: str) -> Dict:
    """
    Funci√≥n completa: calcula plan nutricional completo para el usuario
    
    Esta es la funci√≥n principal que debe usarse desde otros m√≥dulos.
    
    Args:
        user_data: Datos del usuario (peso, altura, edad, sexo, nivel_actividad)
        goal: Objetivo nutricional (volumen, definicion, mantenimiento, etc.)
        
    Returns:
        Dict con:
            - tdee: Calor√≠as de mantenimiento
            - calorias_objetivo: Calor√≠as seg√∫n objetivo
            - macros: Dict con prote√≠na, carbos y grasas en gramos
            - tmb: Tasa Metab√≥lica Basal (para referencia)
    """
    try:
        logger.info("üéØ GENERANDO PLAN NUTRICIONAL COMPLETO")
        logger.info("=" * 60)
        
        # 1. Calcular TDEE (mantenimiento)
        tdee = calculate_maintenance_calories(user_data)
        
        # 2. Calcular calor√≠as seg√∫n objetivo
        calorias_objetivo = calculate_calories_for_goal(tdee, goal)
        
        # 3. Calcular distribuci√≥n de macros
        peso_str = user_data.get("peso", "75")
        peso_kg = parse_peso(peso_str)
        macros = calculate_macros_distribution(calorias_objetivo, peso_kg, goal)
        
        # 4. Calcular TMB para referencia
        altura = int(user_data.get("altura", 175))
        edad = int(user_data.get("edad", 25))
        sexo = user_data.get("sexo", "masculino")
        tmb = calculate_tmb(peso_kg, altura, edad, sexo)
        
        resultado = {
            "tdee": tdee,
            "calorias_objetivo": calorias_objetivo,
            "macros": macros,
            "tmb": int(tmb)
        }
        
        logger.info("=" * 60)
        logger.info("‚úÖ PLAN NUTRICIONAL GENERADO EXITOSAMENTE")
        logger.info(f"   TMB: {int(tmb)} kcal/d√≠a")
        logger.info(f"   TDEE: {tdee} kcal/d√≠a")
        logger.info(f"   Objetivo: {calorias_objetivo} kcal/d√≠a")
        logger.info(f"   Macros: P={macros['proteina']}g C={macros['carbohidratos']}g G={macros['grasas']}g")
        logger.info("=" * 60)
        
        return resultado
        
    except Exception as e:
        logger.error(f"‚ùå Error generando plan nutricional: {e}")
        return {
            "tdee": 2500,
            "calorias_objetivo": 2500,
            "macros": {"proteina": 150, "carbohidratos": 300, "grasas": 70},
            "tmb": 1800
        }


# ==================== TESTING ====================

if __name__ == "__main__":
    """
    Tests b√°sicos para validar las funciones
    """
    print("\n" + "=" * 70)
    print("üß™ TESTING NUTRITION CALCULATOR")
    print("=" * 70)
    
    # Test 1: Usuario masculino moderadamente activo
    print("\nüìã TEST 1: Hombre 25 a√±os, 75kg, 175cm, moderado")
    print("-" * 70)
    test_user_1 = {
        "peso": "75kg",
        "altura": 175,
        "edad": 25,
        "sexo": "masculino",
        "nivel_actividad": "moderado"
    }
    
    plan_1 = get_complete_nutrition_plan(test_user_1, "volumen")
    print(f"\n‚úÖ RESULTADO:")
    print(f"   TMB: {plan_1['tmb']} kcal/d√≠a")
    print(f"   TDEE: {plan_1['tdee']} kcal/d√≠a")
    print(f"   Objetivo (volumen): {plan_1['calorias_objetivo']} kcal/d√≠a")
    print(f"   Macros: P={plan_1['macros']['proteina']}g, C={plan_1['macros']['carbohidratos']}g, G={plan_1['macros']['grasas']}g")
    
    # Test 2: Usuario femenino ligera actividad
    print("\n" + "=" * 70)
    print("üìã TEST 2: Mujer 30 a√±os, 60kg, 165cm, ligera")
    print("-" * 70)
    test_user_2 = {
        "peso": "60",
        "altura": 165,
        "edad": 30,
        "sexo": "femenino",
        "nivel_actividad": "ligero"
    }
    
    plan_2 = get_complete_nutrition_plan(test_user_2, "definicion")
    print(f"\n‚úÖ RESULTADO:")
    print(f"   TMB: {plan_2['tmb']} kcal/d√≠a")
    print(f"   TDEE: {plan_2['tdee']} kcal/d√≠a")
    print(f"   Objetivo (definici√≥n): {plan_2['calorias_objetivo']} kcal/d√≠a")
    print(f"   Macros: P={plan_2['macros']['proteina']}g, C={plan_2['macros']['carbohidratos']}g, G={plan_2['macros']['grasas']}g")
    
    # Test 3: Parse peso
    print("\n" + "=" * 70)
    print("üìã TEST 3: Parse peso")
    print("-" * 70)
    test_pesos = ["75kg", "75.5", "80 kg", "65.2kg", "70"]
    for peso in test_pesos:
        parsed = parse_peso(peso)
        print(f"   '{peso}' ‚Üí {parsed}kg")
    
    print("\n" + "=" * 70)
    print("‚úÖ TODOS LOS TESTS COMPLETADOS")
    print("=" * 70 + "\n")

