#!/usr/bin/env python3
"""
Definiciones de funciones para OpenAI Function Calling
Permite que la IA detecte y ejecute modificaciones din√°micas de rutinas y dietas
"""

from typing import Dict, List, Any

# Definiciones de funciones para OpenAI API
OPENAI_FUNCTIONS: List[Dict[str, Any]] = [
    # ==================== RUTINAS ====================
    
    {
        "name": "modify_routine_injury",
        "description": """
        Elimina ejercicios que afecten una lesi√≥n espec√≠fica y los sustituye por alternativas seguras.
        
        DETECCI√ìN DE VARIACIONES:
        - "Me duele el hombro" ‚Üí body_part="hombro", injury_type="dolor_muscular", severity="mild"
        - "Tengo molestias en la rodilla" ‚Üí body_part="rodilla", injury_type="dolor_muscular", severity="mild"
        - "Me he lesionado el hombro" ‚Üí body_part="hombro", injury_type="dolor_cronico", severity="moderate"
        - "Me lesion√© la espalda" ‚Üí body_part="espalda", injury_type="dolor_cronico", severity="moderate"
        - "Me duele mucho el hombro" ‚Üí body_part="hombro", injury_type="dolor_muscular", severity="moderate"
        - "Tengo una tendinitis en el hombro" ‚Üí body_part="hombro", injury_type="tendinitis", severity="moderate"
        - "No puedo entrenar el hombro porque me duele" ‚Üí body_part="hombro", injury_type="dolor_muscular", severity="mild"
        
        PALABRAS CLAVE PARA DETECCI√ìN:
        - "duele", "dolor", "molestias", "molesta" ‚Üí Dolor/malestar (severidad: mild)
        - "me lesion√©", "me he lesionado", "tengo una lesi√≥n", "estoy lesionado" ‚Üí Lesi√≥n (severidad: moderate)
        - "mucho dolor", "duele mucho", "muy doloroso", "dolor intenso" ‚Üí Dolor intenso (severidad: moderate/severe)
        """,
        "parameters": {
            "type": "object",
            "properties": {
                "body_part": {
                    "type": "string",
                    "description": "Parte del cuerpo lesionada",
                    "enum": ["hombro", "rodilla", "espalda", "cuello", "mu√±eca", "tobillo", "codo", "cadera", "cuadriceps", "piernas", "muslos", "gemelos", "pantorrillas", "pies", "pecho", "brazos", "antebrazo", "lumbar", "cervical", "dorsal", "core", "abdomen"]
                },
                "injury_type": {
                    "type": "string", 
                    "description": "Tipo de lesi√≥n",
                    "enum": ["tendinitis", "esguince", "contractura", "inflamacion", "dolor_cronico", "post_cirugia", "desgarro", "distension", "luxacion", "fractura", "bursitis", "artritis", "dolor_muscular"]
                },
                "severity": {
                    "type": "string",
                    "description": "Severidad de la lesi√≥n",
                    "enum": ["mild", "moderate", "severe"]
                }
            },
            "required": ["body_part", "injury_type", "severity"]
        }
    },
    
    {
        "name": "modify_routine_focus",
        "description": "Aumenta volumen y/o frecuencia de entrenamiento en un √°rea espec√≠fica del cuerpo",
        "parameters": {
            "type": "object",
            "properties": {
                "focus_area": {
                    "type": "string",
                    "description": "√Årea del cuerpo a enfocar",
                    "enum": ["brazos", "pecho", "espalda", "piernas", "hombros", "core", "gluteos", "pantorrillas"]
                },
                "increase_frequency": {
                    "type": "boolean",
                    "description": "Si aumentar la frecuencia de entrenamiento de esa √°rea"
                },
                "volume_change": {
                    "type": "string",
                    "description": "Cambio en el volumen de entrenamiento",
                    "enum": ["ligero_aumento", "aumento_moderado", "aumento_significativo", "mantener_volumen"]
                }
            },
            "required": ["focus_area", "increase_frequency", "volume_change"]
        }
    },
    
    {
        "name": "adjust_routine_difficulty",
        "description": "Ajusta la dificultad general de la rutina (aumentar o disminuir)",
        "parameters": {
            "type": "object",
            "properties": {
                "direction": {
                    "type": "string",
                    "description": "Direcci√≥n del cambio de dificultad",
                    "enum": ["increase", "decrease"]
                },
                "reason": {
                    "type": "string",
                    "description": "Raz√≥n del cambio de dificultad",
                    "enum": ["usuario_se_siente_cansado", "usuario_quiere_mas_desafio", "progreso_estancado", "tiempo_disponible_cambiado", "motivacion_baja"]
                }
            },
            "required": ["direction", "reason"]
        }
    },
    
    {
        "name": "adjust_for_menstrual_cycle",
        "description": "Adapta la rutina seg√∫n la fase del ciclo menstrual (solo para mujeres)",
        "parameters": {
            "type": "object",
            "properties": {
                "phase": {
                    "type": "string",
                    "description": "Fase del ciclo menstrual",
                    "enum": ["folicular", "lutea", "menstruacion", "ovulacion"]
                },
                "day_of_cycle": {
                    "type": "integer",
                    "description": "D√≠a del ciclo (1-28)",
                    "minimum": 1,
                    "maximum": 28
                }
            },
            "required": ["phase", "day_of_cycle"]
        }
    },
    
    # ==================== DIETA ====================
    
    {
        "name": "recalculate_diet_macros",
        "description": """
        Recalcula los macros de la dieta cuando:
        - El usuario cambia de peso (subi√≥/baj√≥ kilos)
        - El usuario cambia su objetivo (volumen, definici√≥n, mantenimiento)
        - El usuario especifica calor√≠as totales deseadas
        - El usuario especifica ajuste cal√≥rico personalizado
        
        üî• DETECCI√ìN DE CAMBIO DE PESO (CR√çTICO):
        - "Sub√≠ 2kg" / "He subido 2kg" / "Aument√© 2kg" ‚Üí weight_change_kg=2
        - "Baj√© 3kg" / "He bajado 3kg" / "Adelgac√© 3kg" / "He adelgazado 3kg" ‚Üí weight_change_kg=-3
        - "Perd√≠ 4kg" / "He perdido 4kg" / "Perd√≠ peso" ‚Üí weight_change_kg=-4
        - "Engord√© 2kg" / "He engordado 2kg" ‚Üí weight_change_kg=2
        - "Gan√© 5kg" / "He ganado 5kg" ‚Üí weight_change_kg=5
        
        ‚ö†Ô∏è IMPORTANTE: Cuando el usuario mencione OBJETIVO + CALOR√çAS en el mismo mensaje, 
        debes extraer AMBOS par√°metros:
        - "Quiero hacer definici√≥n de 500 kcal" ‚Üí goal="definicion", calorie_adjustment=-500, is_incremental=false
        - "Quiero volumen con 3800 kcal" ‚Üí goal="volumen", target_calories=3800
        - "Cambiar a mantenimiento con 3000 kcal" ‚Üí goal="mantenimiento", target_calories=3000
        
        üéØ DETECCI√ìN DE OBJETIVOS SIMPLES (CR√çTICO):
        - "Quiero hacer mantenimiento" ‚Üí goal="mantenimiento"
        - "Quiero mantenimiento" ‚Üí goal="mantenimiento"
        - "Mantenimiento" ‚Üí goal="mantenimiento"
        - "Quiero hacer definici√≥n" ‚Üí goal="definicion"
        - "Quiero hacer volumen" ‚Üí goal="volumen"
        
        DETECCI√ìN DE AJUSTES CAL√ìRICOS:
        üîç ABSOLUTO (establecer d√©ficit/super√°vit total):
        - "Quiero un d√©ficit de 500 kcal" ‚Üí calorie_adjustment=-500, is_incremental=false
        - "Cambiar a super√°vit de 300 kcal" ‚Üí calorie_adjustment=300, is_incremental=false
        - "Definici√≥n de 400 kcal" ‚Üí goal="definicion", calorie_adjustment=-400, is_incremental=false
        - "Quiero que el volumen sea de 200 kcal" ‚Üí goal="volumen", calorie_adjustment=200, is_incremental=false
        - "Quiero que la definici√≥n sea de 500 kcal" ‚Üí goal="definicion", calorie_adjustment=-500, is_incremental=false
        - "Quiero que el super√°vit sea de 200 kcal" ‚Üí calorie_adjustment=200, is_incremental=false
        - "Quiero que el d√©ficit sea de 400 kcal" ‚Üí calorie_adjustment=-400, is_incremental=false
        
        üîç INCREMENTAL (a√±adir al d√©ficit/super√°vit actual):
        - "A√±ade 100 kcal m√°s al d√©ficit" ‚Üí calorie_adjustment=-100, is_incremental=true
        - "Incrementa el super√°vit 50 kcal" ‚Üí calorie_adjustment=50, is_incremental=true
        - "Reduce 200 kcal adicionales" ‚Üí calorie_adjustment=-200, is_incremental=true
        - "Aumenta el super√°vit en 200 kcal m√°s" ‚Üí calorie_adjustment=200, is_incremental=true
        - "Sube el d√©ficit en 100 kcal m√°s" ‚Üí calorie_adjustment=-100, is_incremental=true
        
        ‚ö†Ô∏è AMBIGUO (pedir confirmaci√≥n):
        - "Aumenta el d√©ficit a 500 kcal" ‚Üí calorie_adjustment=-500, is_incremental=null
        - "Aumenta el super√°vit a 200 kcal" ‚Üí calorie_adjustment=200, is_incremental=null
        - "Sube el super√°vit a 400" ‚Üí calorie_adjustment=400, is_incremental=null
        - "Cambia el d√©ficit a 600" ‚Üí calorie_adjustment=-600, is_incremental=null
        REGLA CLARA: si la frase usa la preposici√≥n "a" ("a X kcal") con verbos
        como aumentar/subir/incrementar, TR√ÅTALO COMO AMBIGUO (is_incremental=null).
        Solo marca incremental cuando diga expl√≠citamente "en X", "+X", "m√°s X" o
        "a√±ade X". Marca absoluto cuando diga "de X", "sea de X" o "quiero un d√©ficit/super√°vit de X".
        
        Ejemplos completos:
        - "Sub√≠ 2kg" ‚Üí weight_change_kg=2, goal=null
        - "He adelgazado 3kg" / "Baj√© 3kg" / "Perd√≠ 3kg" ‚Üí weight_change_kg=-3, goal=null
        - "Quiero hacer volumen" ‚Üí goal="volumen"
        - "Quiero hacer volumen de 500 kcal" ‚Üí goal="volumen", calorie_adjustment=500, is_incremental=false
        - "Quiero que el volumen sea de 200 kcal" ‚Üí goal="volumen", calorie_adjustment=200, is_incremental=false
        - "Quiero un d√©ficit de 400 calor√≠as" ‚Üí calorie_adjustment=-400, is_incremental=false
        - "A√±ade 100 kcal m√°s al d√©ficit" ‚Üí calorie_adjustment=-100, is_incremental=true
        - "Aumenta el d√©ficit a 500 kcal" ‚Üí calorie_adjustment=-500, is_incremental=null
        """,
        "parameters": {
            "type": "object",
            "properties": {
                "weight_change_kg": {
                    "type": ["number", "null"],
                    "description": "Cambio de peso en kg (positivo = subi√≥, negativo = baj√≥)",
                    "minimum": -10.0,
                    "maximum": 10.0
                },
                "goal": {
                    "type": ["string", "null"],
                    "enum": ["volumen", "definicion", "mantenimiento", "fuerza", "resistencia"],
                    "description": """
                    Nuevo objetivo nutricional del usuario. 
                    
                    DETECCI√ìN CR√çTICA:
                    - Si el usuario dice "definici√≥n", "definicion", "hacer definici√≥n", "hacer definicion", 
                      "quiero definici√≥n", "quiero definicion" ‚Üí devolver "definicion"
                    - Si el usuario dice "volumen", "hacer volumen", "quiero volumen", "bulking" ‚Üí devolver "volumen"
                    - Si el usuario dice "mantenimiento", "mantener peso" ‚Üí devolver "mantenimiento"
                    
                    Valores permitidos: "definicion", "volumen", "mantenimiento", "fuerza", "resistencia"
                    """
                },
                "target_calories": {
                    "type": ["integer", "null"],
                    "description": "Calor√≠as totales objetivo especificadas por el usuario (ej: 3500, 2800)"
                },
                "calorie_adjustment": {
                    "type": ["integer", "null"],
                    "description": "Ajuste cal√≥rico en kcal (negativo para d√©ficit, positivo para super√°vit)"
                },
                "is_incremental": {
                    "type": ["boolean", "null"],
                    "description": "true=a√±adir al ajuste actual, false=reemplazar total, null=ambiguo (pedir confirmaci√≥n)"
                },
                "adjustment_type": {
                    "type": ["string", "null"],
                    "enum": ["deficit", "surplus"],
                    "description": "Tipo de ajuste cal√≥rico"
                }
            },
            "required": []
        }
    },
    
    {
        "name": "substitute_disliked_food",
        "description": "Sustituye un alimento que no le gusta al usuario por una alternativa con macros similares",
        "parameters": {
            "type": "object",
            "properties": {
                "disliked_food": {
                    "type": "string",
                    "description": "Alimento que no le gusta al usuario"
                },
                "meal_type": {
                    "type": "string",
                    "description": "Tipo de comida donde aparece el alimento",
                    "enum": ["desayuno", "almuerzo", "cena", "snack", "todos"]
                }
            },
            "required": ["disliked_food", "meal_type"]
        }
    },
    
    {
        "name": "generate_meal_alternatives",
        "description": "Genera opciones alternativas para un tipo de comida espec√≠fico",
        "parameters": {
            "type": "object",
            "properties": {
                "meal_type": {
                    "type": "string",
                    "description": "Tipo de comida para generar alternativas",
                    "enum": ["desayuno", "almuerzo", "cena", "snack"]
                },
                "num_alternatives": {
                    "type": "integer",
                    "description": "N√∫mero de alternativas a generar",
                    "minimum": 2,
                    "maximum": 5
                }
            },
            "required": ["meal_type", "num_alternatives"]
        }
    },
    
    {
        "name": "simplify_diet_plan",
        "description": "Simplifica el plan nutricional reduciendo su complejidad",
        "parameters": {
            "type": "object",
            "properties": {
                "complexity_level": {
                    "type": "string",
                    "description": "Nivel de simplicidad deseado",
                    "enum": ["muy_simple", "simple"]
                }
            },
            "required": ["complexity_level"]
        }
    },
    
    {
        "name": "substitute_exercise",
        "description": "Sustituye un ejercicio espec√≠fico por otro alternativo cuando al usuario no le gusta o no tiene la m√°quina",
        "parameters": {
            "type": "object",
            "properties": {
                "exercise_to_replace": {
                    "type": "string",
                    "description": "Nombre del ejercicio que se va a sustituir"
                },
                "replacement_reason": {
                    "type": "string",
                    "description": "Raz√≥n por la cual se sustituye el ejercicio",
                    "enum": ["no_gusta", "no_tiene_maquina", "muy_dificil", "muy_facil", "incomodo", "no_disponible", "otro"]
                },
                "target_muscles": {
                    "type": "string",
                    "description": "Grupos musculares que debe trabajar el ejercicio alternativo",
                    "enum": ["pecho", "espalda", "hombros", "brazos", "piernas", "gluteos", "core", "pantorrillas", "todo_cuerpo"]
                },
                "equipment_available": {
                    "type": "string",
                    "description": "Tipo de equipamiento disponible para el ejercicio alternativo",
                    "enum": ["peso_libre", "maquinas", "cuerpo_libre", "bandas", "kettlebell", "cualquiera"]
                }
            },
            "required": ["exercise_to_replace", "replacement_reason", "target_muscles"]
        }
    },
    
    {
        "name": "modify_routine_equipment",
        "description": "Adapta la rutina cuando el usuario no tiene acceso a ciertas m√°quinas o equipamiento",
        "parameters": {
            "type": "object",
            "properties": {
                "missing_equipment": {
                    "type": "string",
                    "description": "Equipamiento que no est√° disponible",
                    "enum": ["press_banca", "sentadilla_rack", "pesas_libres", "maquinas", "cables", "poleas", "smith_machine", "rack_multiuso", "barras", "discos", "mancuernas", "kettlebells", "bandas_elasticas", "step", "banco", "colchoneta"]
                },
                "available_equipment": {
                    "type": "string",
                    "description": "Equipamiento disponible para sustituir",
                    "enum": ["peso_libre", "cuerpo_libre", "bandas", "kettlebell", "maquinas_basicas", "cables", "step", "banco", "colchoneta", "cualquiera"]
                },
                "affected_exercises": {
                    "type": "string",
                    "description": "Ejercicios espec√≠ficos que se ven afectados por la falta de equipamiento"
                }
            },
            "required": ["missing_equipment", "available_equipment"]
        }
    },
    
    # ==================== GENERAL ====================
    
    {
        "name": "revert_last_modification",
        "description": "Deshace la √∫ltima modificaci√≥n realizada a la rutina o dieta",
        "parameters": {
            "type": "object",
            "properties": {},
            "required": []
        }
    }
]

# Mapeo de nombres de funciones a handlers
FUNCTION_HANDLERS: Dict[str, str] = {
    "modify_routine_injury": "handle_modify_routine_injury",
    "modify_routine_focus": "handle_modify_routine_focus", 
    "adjust_routine_difficulty": "handle_adjust_routine_difficulty",
    "adjust_for_menstrual_cycle": "handle_adjust_menstrual_cycle",
    "recalculate_diet_macros": "handle_recalculate_macros",
    "substitute_disliked_food": "handle_substitute_food",
    "generate_meal_alternatives": "handle_generate_alternatives",
    "simplify_diet_plan": "handle_simplify_diet",
    "substitute_exercise": "handle_substitute_exercise",
    "modify_routine_equipment": "handle_modify_routine_equipment",
    "revert_last_modification": "handle_revert_modification"
}

# Prompts del sistema para cada tipo de funci√≥n
SYSTEM_PROMPTS = {
    "modify_routine_injury": """
    Eres un experto en rehabilitaci√≥n deportiva. Cuando el usuario mencione una lesi√≥n:
    1. Identifica la parte del cuerpo afectada
    2. Determina el tipo de lesi√≥n (tendinitis, esguince, etc.)
    3. Eval√∫a la severidad bas√°ndote en las descripciones del usuario
    4. Sugiere ejercicios alternativos que no comprometan la lesi√≥n
    """,
    
    "modify_routine_focus": """
    Eres un entrenador personal especializado en periodizaci√≥n. Cuando el usuario quiera enfocar m√°s un √°rea:
    1. Identifica qu√© √°rea espec√≠fica quiere desarrollar
    2. Determina si necesita m√°s frecuencia o m√°s volumen
    3. Mant√©n el equilibrio con el resto del cuerpo
    4. Explica los cambios y el razonamiento
    """,
    
    "adjust_routine_difficulty": """
    Eres un coach experto en progresi√≥n de entrenamientos. Cuando el usuario mencione cansancio o facilidad:
    1. Identifica si necesita m√°s o menos dificultad
    2. Determina la raz√≥n del cambio (cansancio, estancamiento, etc.)
    3. Ajusta volumen, intensidad o frecuencia apropiadamente
    4. Mant√©n la progresi√≥n sostenible
    """,
    
    "adjust_for_menstrual_cycle": """
    Eres un especialista en entrenamiento femenino. Cuando una mujer mencione su ciclo:
    1. Identifica la fase del ciclo menstrual
    2. Adapta la intensidad seg√∫n la fase (menstruaci√≥n = menor intensidad)
    3. Sugiere ejercicios apropiados para cada fase
    4. Considera los cambios hormonales y energ√©ticos
    """,
    
    "recalculate_diet_macros": """
    Eres un nutricionista deportivo experto. Cuando el usuario mencione cambios de peso, objetivos o calor√≠as:
    1. Identifica el cambio de peso, nuevo objetivo, calor√≠as espec√≠ficas o ajuste personalizado
    2. ‚ö†Ô∏è CR√çTICO: Si el usuario menciona OBJETIVO + CALOR√çAS en el mismo mensaje, extrae AMBOS par√°metros
    3. ‚ö†Ô∏è CR√çTICO: "Quiero que el volumen sea de X kcal" ‚Üí goal="volumen", calorie_adjustment=X, is_incremental=false
    4. ‚ö†Ô∏è CR√çTICO: "Quiero que la definici√≥n sea de X kcal" ‚Üí goal="definicion", calorie_adjustment=-X, is_incremental=false
    5. ‚ö†Ô∏è CR√çTICO: "Quiero que el super√°vit sea de X kcal" ‚Üí calorie_adjustment=X, is_incremental=false
    6. ‚ö†Ô∏è CR√çTICO: "Quiero que el d√©ficit sea de X kcal" ‚Üí calorie_adjustment=-X, is_incremental=false
    7. Prioriza: calor√≠as totales > ajuste personalizado > c√°lculo autom√°tico
    8. Recalcula las calor√≠as necesarias seg√∫n la prioridad
    9. Ajusta macronutrientes (prote√≠nas, carbohidratos, grasas) proporcionalmente
    10. Mant√©n el equilibrio nutricional y valida rangos saludables (1200-5000 kcal)
    
    üéØ DETECCI√ìN DE OBJETIVOS (CR√çTICO):
    - "Quiero hacer mantenimiento" ‚Üí goal="mantenimiento"
    - "Quiero una dieta de mantenimiento" ‚Üí goal="mantenimiento"
    - "Cambiar a mantenimiento" ‚Üí goal="mantenimiento"
    - "Quiero mantenimiento" ‚Üí goal="mantenimiento"
    - "Mantenimiento" ‚Üí goal="mantenimiento"
    - "Quiero hacer definici√≥n" ‚Üí goal="definicion"
    - "Quiero hacer volumen" ‚Üí goal="volumen"
    - "Quiero definici√≥n" ‚Üí goal="definicion"
    - "Quiero volumen" ‚Üí goal="volumen"
    
    Ejemplos de detecci√≥n CR√çTICOS:
    - "Quiero hacer definici√≥n de 500 kcal" ‚Üí goal="definicion", calorie_adjustment=-500, is_incremental=false
    - "Quiero hacer volumen de 500 kcal" ‚Üí goal="volumen", calorie_adjustment=500, is_incremental=false
    - "Quiero que el volumen sea de 200 kcal" ‚Üí goal="volumen", calorie_adjustment=200, is_incremental=false
    - "Quiero que la definici√≥n sea de 400 kcal" ‚Üí goal="definicion", calorie_adjustment=-400, is_incremental=false
    - "Quiero volumen con 3800 kcal" ‚Üí goal="volumen", target_calories=3800
    - "Cambiar a mantenimiento con 3000 kcal" ‚Üí goal="mantenimiento", target_calories=3000
    - "Quiero volumen pero solo +150 kcal" ‚Üí goal="volumen", calorie_adjustment=150, is_incremental=false
    - "Quiero que el super√°vit sea de 200 kcal" ‚Üí calorie_adjustment=200, is_incremental=false
    - "Quiero que el d√©ficit sea de 400 kcal" ‚Üí calorie_adjustment=-400, is_incremental=false
    
    Ejemplos simples:
    - "Quiero 3500 calor√≠as" ‚Üí target_calories=3500
    - "S√∫beme 200 calor√≠as" ‚Üí calorie_adjustment=200, is_incremental=true
    - "Sub√≠ 2kg" ‚Üí weight_change_kg=2
    - "Quiero hacer definici√≥n" ‚Üí goal="definicion"
    - "Quiero hacer mantenimiento" ‚Üí goal="mantenimiento"
    """,
    
    "substitute_disliked_food": """
    Eres un chef nutricionista. Cuando el usuario no quiera un alimento:
    1. Identifica el alimento espec√≠fico que rechaza
    2. Busca alternativas con macros similares
    3. Considera preferencias de sabor y textura
    4. Mant√©n el valor nutricional
    """,
    
    "generate_meal_alternatives": """
    Eres un meal planner experto. Cuando el usuario pida alternativas:
    1. Identifica el tipo de comida
    2. Genera opciones variadas y atractivas
    3. Mant√©n las calor√≠as y macros similares
    4. Considera tiempo de preparaci√≥n y disponibilidad
    """,
    
    "simplify_diet_plan": """
    Eres un coach de h√°bitos nutricionales. Cuando el usuario pida simplificar:
    1. Reduce la complejidad de las recetas
    2. Disminuye el n√∫mero de ingredientes
    3. Facilita la preparaci√≥n
    4. Mant√©n el valor nutricional
    """,
    
    "substitute_exercise": """
    Eres un entrenador personal experto en variaciones de ejercicios. Cuando el usuario no le guste un ejercicio o no tenga la m√°quina:
    1. Identifica el ejercicio espec√≠fico que quiere cambiar
    2. Determina la raz√≥n (no le gusta, no tiene m√°quina, muy dif√≠cil, etc.)
    3. Busca un ejercicio alternativo que trabaje los mismos grupos musculares
    4. Considera el equipamiento disponible
    5. Explica por qu√© el nuevo ejercicio es una buena alternativa
    """,
    
    "modify_routine_equipment": """
    Eres un especialista en adaptaci√≥n de rutinas. Cuando el usuario no tenga acceso a ciertas m√°quinas:
    1. Identifica qu√© equipamiento espec√≠fico no est√° disponible
    2. Determina qu√© ejercicios se ven afectados
    3. Busca alternativas usando el equipamiento disponible
    4. Mant√©n la intensidad y grupos musculares trabajados
    5. Proporciona opciones claras y viables
    """,
    
    "revert_last_modification": """
    Eres un asistente de gesti√≥n de cambios. Cuando el usuario quiera deshacer:
    1. Identifica la √∫ltima modificaci√≥n realizada
    2. Restaura la versi√≥n anterior
    3. Explica qu√© se ha revertido
    4. Ofrece alternativas si es necesario
    """
}

def get_function_by_name(function_name: str) -> Dict[str, Any]:
    """
    Obtiene la definici√≥n de una funci√≥n por su nombre
    
    Args:
        function_name: Nombre de la funci√≥n
        
    Returns:
        Diccionario con la definici√≥n de la funci√≥n
        
    Raises:
        ValueError: Si la funci√≥n no existe
    """
    for func in OPENAI_FUNCTIONS:
        if func["name"] == function_name:
            return func
    
    raise ValueError(f"Funci√≥n '{function_name}' no encontrada")

def get_system_prompt_for_function(function_name: str) -> str:
    """
    Obtiene el prompt del sistema para una funci√≥n espec√≠fica
    
    Args:
        function_name: Nombre de la funci√≥n
        
    Returns:
        Prompt del sistema correspondiente
    """
    return SYSTEM_PROMPTS.get(function_name, "Eres un asistente experto en fitness y nutrici√≥n.")

def validate_function_arguments(function_name: str, arguments: Dict[str, Any]) -> bool:
    """
    Valida que los argumentos de una funci√≥n sean correctos
    
    Args:
        function_name: Nombre de la funci√≥n
        arguments: Diccionario con los argumentos
        
    Returns:
        True si los argumentos son v√°lidos, False si no
    """
    try:
        function_def = get_function_by_name(function_name)
        required_params = function_def["parameters"].get("required", [])
        properties = function_def["parameters"].get("properties", {})
        
        # Verificar par√°metros requeridos
        for param in required_params:
            if param not in arguments:
                return False
        
        # Verificar tipos y valores v√°lidos
        for param_name, param_value in arguments.items():
            if param_name not in properties:
                continue
                
            param_def = properties[param_name]
            param_type = param_def.get("type")
            
            # Verificar tipo
            if param_type == "string" and not isinstance(param_value, str):
                return False
            elif param_type == "integer" and not isinstance(param_value, int):
                return False
            elif param_type == "number" and not isinstance(param_value, (int, float)):
                return False
            elif param_type == "boolean" and not isinstance(param_value, bool):
                return False
            
            # Verificar valores enum
            if "enum" in param_def and param_value not in param_def["enum"]:
                return False
            
            # Verificar rangos
            if "minimum" in param_def and param_value < param_def["minimum"]:
                return False
            if "maximum" in param_def and param_value > param_def["maximum"]:
                return False
        
        return True
        
    except Exception:
        return False
